{"version":3,"file":"static/js/716.c9fcd4ee.chunk.js","mappings":"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","sources":["components/videos/VideoSearch.jsx","pages/Channel.jsx","utils/api.js"],"sourcesContent":["import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst VideoSearch = ({videos}) => {\r\n  return (\r\n    <>\r\n      {videos.map((video, index) => (\r\n        <div className='video' key={index}>\r\n          <div className='video__thumb play__icon'>\r\n            <Link \r\n              to={`/video/${video.id.videoId}`}\r\n              style={{backgroundImage: `url(${video.snippet.thumbnails.high.url})`}}\r\n            ></Link>\r\n          </div>\r\n          <div className='video__info'>\r\n            <div className='title'>\r\n              <Link to={`/video/${video.id.videoId}`}>\r\n                {video.snippet.title}\r\n              </Link>\r\n            </div>\r\n            <div className='info'>\r\n              <span className='author'>\r\n                <Link to={`/channel/${video.snippet.channelId}`}>\r\n                  {video.snippet.channelTitle}\r\n                </Link>\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default VideoSearch","import React, { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { fetchFromAPI } from \"../utils/api\";\r\n\r\nimport Main from \"../components/section/Main\";\r\n\r\nimport { CiBadgeDollar } from \"react-icons/ci\";\r\nimport { CiMedal } from \"react-icons/ci\";\r\nimport { CiRead } from \"react-icons/ci\";\r\n\r\n//검색창 임포트\r\nimport VideoSearch from '../components/videos/VideoSearch'\r\n\r\nconst Channel = () => {\r\n  const { channelId } = useParams(); //파라미터로 전달된 채널아이디를 저장\r\n\r\n  const [channelDetail, setChannelDetail] = useState();\r\n  const [loading, setLoading] = useState(true);\r\n  //영상 데이터 상태\r\n  const [channelVideo, setChannelVideo] = useState([])\r\n  //다음 영상의 토큰을 저장\r\n  const [nextPageToken, setNextPageToken] = useState(null);\r\n\r\n  //channelID가 변경되면 채널아이디값에 해당하는 데이터를 불러오는 함수\r\n  useEffect(() => {\r\n    //함수 생성\r\n    const fetchResults = async () => {\r\n      try {\r\n        //성공시 실행\r\n        const data = await fetchFromAPI(\r\n          `channels?part=snippet&id=${channelId}`\r\n        );\r\n        setChannelDetail(data.items[0]);\r\n        //영상을 최근 날짜순으로 요청\r\n        const videosData = await fetchFromAPI(`search?channelId=${channelId}&part=snippet%2Cid&order=date`) //%2C = url인코딩 특수문자\r\n        //불러온 영상을 상태에 저장\r\n        setChannelVideo(videosData?.items)\r\n        //토큰을 상태에 저장\r\n        setNextPageToken(videosData?.nextPageToken)\r\n      } catch (error) {\r\n        //실패시 실행\r\n        console.error(error);\r\n      } finally {\r\n        //요청이 실패하던 성공하던 무조건 실행되는 구문\r\n        setLoading(false); //API 응답이 완료되면 loading을 false로 변경\r\n      }\r\n    };\r\n    fetchResults(); //fetchResults함수 호출\r\n  }, [channelId]);\r\n\r\n  const channelPageClass = loading ? 'isLoading' : 'isLoaded';\r\n\r\n  //다음 영상을 불러오는 함수\r\n  const loadMoreVideos = async () => {\r\n    if(nextPageToken){\r\n      const videosData = await fetchFromAPI(`search?channelId=${channelId}&part=snippet%2Cid&order=date&pageToken=${nextPageToken}`)\r\n      //기존에 상태에 저장된 영상데이터를 그대로 구조분해 할당으로 배열로 할당하고 새로 추가된 영상 데이터를 구조분해할당으로 배열에 추가해줍니다.\r\n      setChannelVideo(prevVideos => [...prevVideos, ...videosData.items])\r\n      //다음 영상이 있으면 토큰을 상태에 할당\r\n      setNextPageToken(videosData?.nextPageToken)\r\n    }\r\n  }\r\n  return (\r\n    <Main title=\"유튜브 채널\" description=\"유튜브 채널페이지입니다.\">\r\n      <section id=\"channel\" className={channelPageClass}>\r\n        {channelDetail && (\r\n          <div className=\"channel__inner\">\r\n            <div\r\n              className=\"channel__header\"\r\n              style={{\r\n                backgroundImage: `url(${channelDetail.brandingSettings.image.bannerExternalUrl})`,\r\n              }}\r\n            >\r\n              <div className=\"circle\">\r\n                <img\r\n                  src={channelDetail.snippet.thumbnails.high.url}\r\n                  alt={channelDetail.snippet.title}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"channel__info\">\r\n              <h3 className=\"title\">{channelDetail.snippet.title}</h3>\r\n              <p className=\"desc\">{channelDetail.snippet.description}</p>\r\n              <div className=\"info\">\r\n                <span>\r\n                  <CiBadgeDollar />\r\n                  {channelDetail.statistics.subscriberCount}\r\n                </span>\r\n                <span>\r\n                  <CiMedal />\r\n                  {channelDetail.statistics.videoCount}\r\n                </span>\r\n                <span>\r\n                  <CiRead />\r\n                  {channelDetail.statistics.viewCount}\r\n                </span>\r\n              </div>\r\n            </div>\r\n            {/*VideoSearch컴포넌트로 영상을 표시 */}\r\n            <div className=\"channel__video video__inner search\">\r\n              <VideoSearch videos={channelVideo} />\r\n            </div>\r\n            <div className=\"channel__more\">\r\n              {nextPageToken && (\r\n                <button onClick={loadMoreVideos}>더보기</button>\r\n              )}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </section>\r\n    </Main>\r\n  );\r\n};\r\n\r\nexport default Channel;\r\n","import axios from 'axios';\r\n\r\nexport const BASE_URL = 'https://youtube-v31.p.rapidapi.com'\r\n\r\nconst options = {\r\n  params: {\r\n    maxResults: '30'\r\n  },\r\n  headers: {\r\n    'x-rapidapi-key': process.env.REACT_APP_RAPID_API_KEY,\r\n    'x-rapidapi-host': 'youtube-v31.p.rapidapi.com'\r\n  }\r\n};\r\n\r\n//전달받은 인자(url)를 가지고 api키와 URL파라미터를 조립해서 함수를 호출한 곳으로 반환\r\nexport const fetchFromAPI = async (url) => {\r\n\tconst {data} = await axios.get(`${BASE_URL}/${url}`, options);\r\n\tconsole.log(data);\r\n  return data;\r\n}"],"names":["_ref","videos","_jsx","_Fragment","children","map","video","index","_jsxs","className","Link","to","id","videoId","style","backgroundImage","snippet","thumbnails","high","url","title","channelId","channelTitle","Channel","useParams","channelDetail","setChannelDetail","useState","loading","setLoading","channelVideo","setChannelVideo","nextPageToken","setNextPageToken","useEffect","async","data","fetchFromAPI","items","videosData","error","console","fetchResults","channelPageClass","Main","description","brandingSettings","image","bannerExternalUrl","src","alt","CiBadgeDollar","statistics","subscriberCount","CiMedal","videoCount","CiRead","viewCount","VideoSearch","onClick","prevVideos","options","params","maxResults","headers","process","axios","get","log"],"sourceRoot":""}